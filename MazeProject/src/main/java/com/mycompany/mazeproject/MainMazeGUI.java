/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.mazeproject;

import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author hp
 */
public class MainMazeGUI extends javax.swing.JFrame {

    /**
     * Creates new form MainMazeGUI
     */
    public MainMazeGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createMaze = new javax.swing.JButton();
        rowSize = new javax.swing.JTextField();
        colSize = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        createMaze.setText("Generate Maze");
        createMaze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createMazeActionPerformed(evt);
            }
        });

        jLabel1.setText("Eneter number of rows:");

        jLabel2.setText("Enter number of columns:");

        jLabel3.setFont(new java.awt.Font("Rubik", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 51, 51));
        jLabel3.setText("Maze Game");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(rowSize, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(61, 61, 61)
                                .addComponent(colSize, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(createMaze, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rowSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(colSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(createMaze, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createMazeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createMazeActionPerformed
        // TODO add your handling code here:
        try {
                int rows = Integer.parseInt(rowSize.getText());
                int cols = Integer.parseInt(colSize.getText());
               // List<TileData> dataset = new ArrayList<>();
                
               List<TileData> dataset = getTileDataset();   
                int[][] inputs = new int[dataset.size()][3];
           int[] labels = new int[dataset.size()];
           
           for (int i = 0; i < dataset.size(); i++) {
            TileData tile = dataset.get(i);
            inputs[i][0] = tile.terrain;
            inputs[i][1] = tile.elevation;
            inputs[i][2] = tile.obstacleDistance;
            labels[i] = tile.label;
           }
           
            Perceptron p = new Perceptron(3, 0.1, 0.2);
                p.train(inputs, labels, 100);

                Tile[][] maze = MazeGenerator.generateMaze(rows, cols, p);
                JFrame mazeFrame = new JFrame("Maze");
                
              //  mazeFrame.add(new MazePanel(maze));
              MazePanel mazePanel = new MazePanel(maze);
              JPanel container = new JPanel(new BorderLayout());
               container.add(mazePanel, BorderLayout.CENTER);

                 JButton runAStarButton = new JButton("Run A*");
                runAStarButton.addActionListener(e -> runAStar(maze, mazePanel));
                container.add(runAStarButton, BorderLayout.SOUTH);

                mazeFrame.add(container);
              
                mazeFrame.pack();
                
                mazeFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                mazeFrame.setVisible(true);
           
        
  } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Please enter valid integers for rows and columns.");
            }
    }//GEN-LAST:event_createMazeActionPerformed

    
     private List<TileData> getTileDataset() {
        List<TileData> dataset = new ArrayList<>();
        dataset.add(new TileData(0, 1, 10, 1));
           dataset.add(new TileData(1, 9, 8, 0));
           dataset.add(new TileData(0, 1, 4, 1));
           dataset.add(new TileData(0, 9, 0, 1));
           dataset.add(new TileData(0, 3, 2, 1));
           dataset.add(new TileData(1, 7, 9, 0));
           dataset.add(new TileData(0, 6, 7, 1));
           dataset.add(new TileData(0, 8, 10, 1));  
           dataset.add(new TileData(0, 7, 5, 1));
           dataset.add(new TileData(1, 4, 7, 0));
           dataset.add(new TileData(0, 1, 8, 1));
           dataset.add(new TileData(0, 4, 3, 1));
           dataset.add(new TileData(0, 7, 0, 1));
           dataset.add(new TileData(0, 9, 0, 1));
           dataset.add(new TileData(1, 8, 9, 0));
           dataset.add(new TileData(0, 8, 3, 1));
           dataset.add(new TileData(1, 0, 6, 0));
           dataset.add(new TileData(1, 8, 1, 0));
           dataset.add(new TileData(1, 6, 2, 0));    // this is number 20
           dataset.add(new TileData(0, 8, 0, 1));
           dataset.add(new TileData(1, 7, 4, 0));
           dataset.add(new TileData(0, 0, 0, 0));
           dataset.add(new TileData(1, 7, 7, 0));
           dataset.add(new TileData(1, 7, 0, 0));
           dataset.add(new TileData(1, 10, 10, 0));
           dataset.add(new TileData(1, 2, 0, 0));
           dataset.add(new TileData(1, 0, 1, 0));
           dataset.add(new TileData(1, 7, 1, 0));
           dataset.add(new TileData(1, 2, 5, 0)); // this is number 30   
           dataset.add(new TileData(1, 2, 6, 0));
           dataset.add(new TileData(0, 0, 4, 1));
           dataset.add(new TileData(0, 10, 0, 1));
           dataset.add(new TileData(1, 4, 0, 0));
           dataset.add(new TileData(1, 9, 2, 0));
           dataset.add(new TileData(1, 6, 1, 0));
           dataset.add(new TileData(0, 9, 4, 1));
           dataset.add(new TileData(1, 8, 9, 0));
           dataset.add(new TileData(0, 6, 5, 1));
           dataset.add(new TileData(0, 8, 6, 1)); // this is number 40
           dataset.add(new TileData(0, 7, 3, 1));
           dataset.add(new TileData(0, 1, 6, 1));
           dataset.add(new TileData(0, 0, 10, 1));
           dataset.add(new TileData(1, 6, 7, 0));
           dataset.add(new TileData(1, 6, 10, 0));
           dataset.add(new TileData(1, 7, 0, 0));
           dataset.add(new TileData(1, 4, 5, 0));
           dataset.add(new TileData(1, 2, 7, 0));
           dataset.add(new TileData(0, 7, 4, 1));
           dataset.add(new TileData(1, 5, 3, 0)); // this is number 50
           dataset.add(new TileData(1, 10, 1, 0));
           dataset.add(new TileData(0, 2, 5, 1));
           dataset.add(new TileData(1, 0, 5, 0));
           dataset.add(new TileData(0, 2, 10, 1));
           dataset.add(new TileData(1, 4, 0, 0));
           dataset.add(new TileData(0, 2, 8, 1));
           dataset.add(new TileData(1, 0, 10, 0));
           dataset.add(new TileData(1, 4, 5, 0));
           dataset.add(new TileData(0, 9, 2, 1));
           dataset.add(new TileData(0, 6, 3, 1)); // this is number 60
           dataset.add(new TileData(0, 6, 10, 1));
           dataset.add(new TileData(0, 10, 3, 1));
           dataset.add(new TileData(0, 8, 2, 1));
           dataset.add(new TileData(0, 9, 9, 1));
           dataset.add(new TileData(0, 9, 2, 1)); // this is number 65
           dataset.add(new TileData(0, 2, 2, 0));
           dataset.add(new TileData(1, 6, 3, 0));
           dataset.add(new TileData(1, 0, 6, 0));
           dataset.add(new TileData(0, 3, 3, 1));
           dataset.add(new TileData(1, 3, 8, 0)); // this is 70
           dataset.add(new TileData(1, 4, 0, 0));
           dataset.add(new TileData(1, 6, 7, 0));
           dataset.add(new TileData(1, 6, 6, 0));
           dataset.add(new TileData(0, 10, 1, 1));
           dataset.add(new TileData(1, 3, 7, 0)); // this is 75
           dataset.add(new TileData(0, 6, 0, 1));  
           dataset.add(new TileData(1, 10, 10, 0));
           dataset.add(new TileData(1, 2, 8, 0));
           dataset.add(new TileData(1, 5, 8, 0));
           dataset.add(new TileData(0, 1, 1, 0)); // this is 80
           dataset.add(new TileData(1, 9, 6, 0)); 
           dataset.add(new TileData(0, 8, 9, 1));
           dataset.add(new TileData(1, 4, 2, 0));
           dataset.add(new TileData(0, 5, 6, 1));
           dataset.add(new TileData(1, 3, 9, 0)); // this is 85
           dataset.add(new TileData(0, 10, 8, 1));
           dataset.add(new TileData(0, 9, 3, 1));
           dataset.add(new TileData(1, 6, 0, 0));
           dataset.add(new TileData(0, 8, 1, 1));
           dataset.add(new TileData(1, 6, 0, 0)); // this is 90
           dataset.add(new TileData(1, 0, 4, 0));
           dataset.add(new TileData(1, 0, 4, 0));
           dataset.add(new TileData(1, 8, 10, 0));
           dataset.add(new TileData(1, 10, 6, 0));
           dataset.add(new TileData(1, 8, 8, 0)); // this is 95 
           dataset.add(new TileData(1, 3, 8, 0));
           dataset.add(new TileData(1, 8, 2, 0));
           dataset.add(new TileData(1, 2, 2, 0));
           dataset.add(new TileData(1, 6, 2, 0));
           dataset.add(new TileData(1, 5, 3, 0)); // this is 100
           dataset.add(new TileData(0, 7, 7, 1));
           return dataset;
     }
     
     
     private void runAStar(Tile[][] maze, MazePanel panel) {
   
    for (Tile[] row : maze)
        for (Tile tile : row)
            tile.isPath = false;

    List<Node> path = AStar.findPath(maze);
    if (path != null) {
        for (Node node : path) {
            Tile tile = maze[node.row][node.col];
            if (!tile.isStart && !tile.isEnd) {
                tile.isPath = true;
            }
        }
        panel.repaint();
    } else {
        JOptionPane.showMessageDialog(panel, "No path found!");
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMazeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMazeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMazeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMazeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMazeGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField colSize;
    private javax.swing.JButton createMaze;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField rowSize;
    // End of variables declaration//GEN-END:variables
}
